{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","map","movie","key","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5260df51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child) {\r\n        margin-bottom: 50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size:14px;\r\n    font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display:grid;\r\n    grid-template-columns: repeat(auto-fill, 125px);\r\n    grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n//import loading from '../assets/icon_loading.gif';\r\n\r\nconst Container = styled.div`\r\n    height:100vh;\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content: center;\r\n    font-size:28px;\r\n    /* margin-top: 200px; */\r\n    transform:translateY(40%); \r\n    position:fixed;\r\n    @media (max-width: 600px){\r\n        font-size:20px;\r\n    }\r\n`;\r\n\r\nexport default () => (\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">\r\n            {/* <img src={loading} /> ⏰*/}Loading...\r\n        </span> \r\n    </Container>\r\n);\r\n\r\n","import React from \"react\";\r\nimport PropTypes, { string } from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n    <Container>\r\n        <Text color={color}>{text}</Text>\r\n    </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image: url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    bottom: 5px;\r\n    right: 5px;\r\n    position: absolute;\r\n    opacity:0;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n    &:hover {\r\n        ${Image} {\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display: block;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\n\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n    <Link to={isMovie? `/movie/${id}` : `/show/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image \r\n                    bgUrl={\r\n                        imageUrl \r\n                            ? `https://image.tmdb.org/t/p/w300${imageUrl}` \r\n                            : require(\"../assets/noPosterSmall.png\")\r\n                    } \r\n                />\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">\r\n                        ★\r\n                    </span>{\" \"}\r\n                    {rating}/10\r\n                </Rating>\r\n            </ImageContainer>\r\n            <Title>\r\n                {title.length > 18 ? `${title.substring(0, 18)}...` : title}\r\n            </Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n};\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({nowPlaying, popular, upcoming, loading, error }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>Movies | T-flix</title>\r\n        </Helmet>\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <Container>\r\n                <Helmet>\r\n                    <title>Movies | T-flix</title>\r\n                </Helmet>\r\n                {nowPlaying && nowPlaying.length > 0 && (\r\n                    <Section title=\"Now Playing\">\r\n                        {nowPlaying.map(movie =>(\r\n                            <Poster \r\n                                key={movie.id} \r\n                                id={movie.id} \r\n                                imageUrl={movie.poster_path} \r\n                                title={movie.original_title}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0,4)}\r\n                                isMovie={true}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {upcoming && upcoming.length > 0 && (\r\n                    <Section title=\"Upcoming Movies\">\r\n                        {upcoming.map(movie =>(\r\n                            <Poster \r\n                                key={movie.id} \r\n                                id={movie.id} \r\n                                imageUrl={movie.poster_path} \r\n                                title={movie.original_title}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0,4)}\r\n                                isMovie={true}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular Movies\">\r\n                        {popular.map(movie =>(\r\n                            <Poster \r\n                                key={movie.id} \r\n                                id={movie.id} \r\n                                imageUrl={movie.poster_path} \r\n                                title={movie.original_title}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date && movie.release_date.substring(0,4)}\r\n                                isMovie={true}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>\r\n        )}\r\n    </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    upcoming: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3/\",\r\n    params: {\r\n        api_key: \"866e368f498c8454ee958d4e1fe1e9e8\",\r\n        language: \"en-US\"\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const moviesApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    upcoming: () => api.get(\"movie/upcoming\"),\r\n    popular: () => api.get(\"movie/popular\"),\r\n    movieDetail: id =>\r\n      api.get(`movie/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: term => \r\n      api.get(\"search/movie\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    popular: () => api.get(\"tv/popular\"),\r\n    airingToday: () => api.get(\"tv/airing_today\"),\r\n    showDetail: id => \r\n      api.get(`tv/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: term => \r\n      api.get(\"search/tv\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })\r\n};","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upcoming: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true\r\n    };\r\n\r\n    async componentDidMount(){ //async, await는 자바스크립트한테, 서버로부터 데이터를 갖고오는 것을 끝날떄까지 \"거기~나 좀 기다려\"라고 말하는 것과 같다. \r\n                               //async라는 단어를 가진 함수 안에 있지 않으면 await를 사용할 수 없다.\r\n        try{ //성공할떄\r\n           const {\r\n               data: {results: nowPlaying }\r\n            } = await moviesApi.nowPlaying();\r\n           const {\r\n               data: {results: upcoming }\r\n            } = await moviesApi.upcoming();\r\n           const {\r\n               data: { results: popular }\r\n           } = await moviesApi.popular();\r\n           this.setState({\r\n            nowPlaying,\r\n            upcoming,\r\n            popular\r\n           });\r\n           //console.log(this.state.nowPlaying);\r\n        } catch{ //실패할떄\r\n            this.setState({\r\n                error: \"Can't find movie information.\"\r\n            });\r\n        } finally{ //성공, 실패 여부와 관계없이 완료하고 마지막 동작을 취하고 싶을때\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n       const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n       //console.log(this.state);\r\n       return (\r\n        <HomePresenter \r\n            nowPlaying={nowPlaying} \r\n            upcoming={upcoming} \r\n            popular={popular} \r\n            error={error}\r\n            loading={loading}\r\n        />\r\n       );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({topRated, popular, airingToday, loading, error }) => (\r\n    <>\r\n        <Helmet><title>TV Shows | T-flix</title></Helmet>\r\n        { loading ? (\r\n        <Loader />\r\n    ) : (\r\n        <Container>\r\n            {topRated && topRated.length > 0 && (\r\n                <Section title=\"Top Rated Shows\">\r\n                    {topRated.map(show =>(\r\n                        <Poster \r\n                            key={show.id} \r\n                            id={show.id} \r\n                            imageUrl={show.poster_path} \r\n                            title={show.original_name}\r\n                            rating={show.vote_average}\r\n                            year={show.first_air_date.substring(0,4)}\r\n                        />\r\n                    ))}\r\n                </Section>\r\n            )}\r\n            {popular && popular.length > 0 && (\r\n                <Section title=\"Popular Shows\">\r\n                    {popular.map(show =>(\r\n                        <Poster \r\n                            key={show.id} \r\n                            id={show.id} \r\n                            imageUrl={show.poster_path} \r\n                            title={show.original_name}\r\n                            rating={show.vote_average}\r\n                            year={show.first_air_date.substring(0,4)}\r\n                        />\r\n                    ))}\r\n                </Section>\r\n            )}\r\n            {airingToday && airingToday.length > 0 && (\r\n                <Section title=\"Airing Today\">\r\n                    {airingToday.map(show =>(\r\n                        <Poster \r\n                            key={show.id} \r\n                            id={show.id} \r\n                            imageUrl={show.poster_path} \r\n                            title={show.original_name}\r\n                            rating={show.vote_average}\r\n                            year={show.first_air_date.substring(0,4)}\r\n                        />\r\n                    ))}\r\n                </Section>\r\n            )}\r\n            {error && <Message color=\"#e74c3c\" text={error} />}\r\n        </Container>\r\n    )}\r\n    </>\r\n)\r\n\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;","import TVContainer from './TVContainer';\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        loading: true,\r\n        error: null\r\n    };\r\n\r\n    async componentDidMount(){ //async, await는 자바스크립트한테, 서버로부터 데이터를 갖고오는 것을 끝날떄까지 \"거기~나 좀 기다려\"라고 말하는 것과 같다. \r\n                                //async라는 단어를 가진 함수 안에 있지 않으면 await를 사용할 수 없다.\r\n        try{ //성공할떄\r\n            const {\r\n                data: {results:topRated}\r\n            } = await tvApi.topRated();\r\n            const {\r\n                data: {results:popular}\r\n            } = await tvApi.popular();\r\n            const {\r\n                data: {results:airingToday}\r\n            } = await tvApi.airingToday();\r\n            this.setState({ topRated, popular, airingToday });\r\n        } catch{ //실패할때\r\n            this.setState({\r\n                error: \"Can't find TV information.\"\r\n            })\r\n        } finally { //성공, 실패 여부와 관계없이 완료하고 마지막 동작을 취하고 싶을때\r\n            this.setState({ loading: false });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { topRated, popular, airingToday, loading, error } = this.state;\r\n        //console.log(this.state);\r\n        return( \r\n            <TVPresenter \r\n                topRated={topRated} \r\n                popular={popular} \r\n                airingToday={airingToday} \r\n                loading={loading} \r\n                error={error}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    color:white;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n    background-color: rgba(20, 20, 20, 0.8);\r\n    z-index: 10;\r\n    box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n    display:flex;\r\n    \r\n`;\r\n\r\nconst Item = styled.li`\r\n    width: 50px;\r\n    height: 50px;\r\n    text-align:center;\r\n    border-bottom: 3px solid \r\n        ${props => (props.current ? \"#3498db\" : \"transparent\")};\r\n    transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\n\r\n export default withRouter(({ location: { pathname } }) => (\r\n    <Header>\r\n        <List>\r\n            <Item current={pathname === \"/\"}>\r\n                <SLink to=\"/\">Movies</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <SLink to=\"/tv\">TV</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <SLink to=\"/search\">Search</SLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 5px 20px;\r\n    @media (max-width: 600px){\r\n        padding: 8px 20px;\r\n    }\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom: 50px;\r\n    width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all: unset;\r\n    font-size: 28px;\r\n    width: 100%;\r\n    @media (max-width: 600px){\r\n        font-size: 20px;\r\n    }\r\n`;\r\n\r\n\r\nconst SearchPresenter = ({\r\n    movieResults, \r\n    tvResults, \r\n    loading, \r\n    searchTerm, \r\n    handleSubmit,\r\n    error,\r\n    updateTerm \r\n}) => <Container>\r\n        <Helmet>\r\n            <title>Search | T-flix</title>\r\n        </Helmet>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input\r\n            placeholder=\"Search Movies or TV Show...\" \r\n            value={searchTerm} \r\n            onChange={updateTerm}  //updateTerm함수는 Input태그에 글자를 하나씩 입력할때 마다 실행된다. 즉 onChange될때마다 매번 실행된다. (SearchContainer.js 참조)\r\n            />\r\n        </Form>\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <>\r\n                {movieResults && movieResults.length > 0 && (\r\n                    <Section title=\"Movie Results\">\r\n                        {movieResults.map(movie => (\r\n                            <Poster \r\n                                key={movie.id} \r\n                                id={movie.id} \r\n                                imageUrl={movie.poster_path} \r\n                                title={movie.original_title}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date.substring(0,4)}\r\n                                isMovie={true}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {tvResults && tvResults.length > 0 && (\r\n                    <Section title=\"TV Show Results\">\r\n                        {tvResults.map(show => (\r\n                            <Poster \r\n                                key={show.id} \r\n                                id={show.id} \r\n                                imageUrl={show.poster_path} \r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n                {tvResults && \r\n                    movieResults && \r\n                    tvResults.length === 0 && \r\n                    movieResults.length === 0 && (\r\n                        <Message text=\"Nothing found\" color=\"#95a5a6\" />\r\n                )}\r\n            </>\r\n        )}\r\n</Container>\r\n\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    error: PropTypes.string,\r\n    searchTerm: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;","import SearchContainer from './SearchContainer';\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi } from \"../../api\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        searchTerm: \"\",\r\n        loading: false,\r\n        error: null\r\n    };\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault(); //기본동작취소(새로고침되는거 막기)\r\n        const { searchTerm } = this.state;\r\n        if(searchTerm !== \"\"){\r\n            this.searchByTerm();\r\n        }\r\n    };\r\n\r\n    updateTerm = (event) => { //updateTerm함수는 onChange될때마다 매번 실행된다.(SearchPresenter.js  참조)\r\n        const { \r\n            target: { value } //event객체안에 target이라는 객체가 있는데 이것은 현재 이벤트가 발생한 엘리먼트(Input태그)를 말하고 \r\n        } = event;            //거기안에 value라는 속성을 받아와서 value라는 상수에 대입한다는 뜻이다.\r\n        this.setState({\r\n            searchTerm: value\r\n        });\r\n    };\r\n\r\n\r\n    //async, await는 자바스크립트한테, 서버로부터 데이터를 갖고오는 것을 끝날떄까지 \"거기~나 좀 기다려\"라고 말하는 것과 같다. \r\n    //async라는 단어를 가진 함수 안에 있지 않으면 await를 사용할 수 없다.\r\n    searchByTerm = async() => {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ loading: true });\r\n        try{//성공할떄\r\n            const {\r\n                data: {results: movieResults }\r\n            } = await moviesApi.search(searchTerm);\r\n            const {\r\n                data: {results: tvResults }\r\n            } = await tvApi.search(searchTerm);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            });\r\n        } catch{//실패할떄\r\n            this.setState({ error: \"Can't find results.\" });\r\n        } finally{//성공, 실패 여부와 관계없이 완료하고 마지막 동작을 취하고 싶을때\r\n            this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    render(){\r\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n        return( \r\n            <SearchPresenter \r\n                movieResults={movieResults}\r\n                tvResults={tvResults}\r\n                loading={loading} \r\n                error={error}\r\n                searchTerm={searchTerm}\r\n                handleSubmit={this.handleSubmit}\r\n                updateTerm={this.updateTerm}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n    height: calc(100vh - 50px);\r\n    width: 100%;\r\n    position: relative;\r\n    padding: 50px;\r\n    @media (max-width: 1000px){\r\n        padding: 30px 15px 25px 15px;\r\n    }\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position:center center;\r\n    \r\n    background-size: cover;\r\n    filter: blur(3px);\r\n    opacity: 0.5;\r\n    z-index: 0;\r\n    @media (max-width: 900px){\r\n        position:fixed;\r\n        background-attachment: scroll;\r\n        \r\n    }\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    \r\n    width: 100%;\r\n    position:relative;\r\n    z-index: 1;\r\n    height: 100%;\r\n    display: flex;\r\n    @media (max-width: 900px){\r\n        flex-wrap: wrap;\r\n        \r\n    }\r\n`;\r\n\r\nconst Cover = styled.div`\r\n    width: 30%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position:center center;\r\n    \r\n    background-size: cover;\r\n    height: 100%;\r\n    border-radius: 5px;\r\n    background-repeat: no-repeat;\r\n    @media (max-width: 1300px){\r\n        width:100%;\r\n        background-position:center top;\r\n    }\r\n    @media (max-width: 900px){\r\n        width:100%;\r\n        \r\n        background-size: contain;\r\n        \r\n    }\r\n    @media (max-width: 550px){\r\n        background-size:cover;\r\n        /*height: 80%;*/\r\n        max-height: 90%; \r\n    }\r\n    @media (max-width: 500px){\r\n        \r\n        \r\n    }\r\n    \r\n`;\r\n\r\nconst Data = styled.span`\r\n    width:70%;\r\n    margin-left: 10px;\r\n    @media (max-width: 1300px){\r\n        width:100%;\r\n        \r\n    }\r\n    @media (max-width: 900px){\r\n        padding:20px 0 40px 0;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    font-size: 32px;\r\n  \r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n    margin:20px 0;\r\n`;\r\n\r\nconst Item = styled.span`\r\n\r\n`;\r\n\r\nconst Divider = styled.span`\r\n    margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size: 12px;\r\n    opacity: 0.7;\r\n    line-height: 1.5;\r\n    width: 50%;\r\n    @media (max-width: 900px){\r\n        width: 85%;\r\n    }\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error,}) => \r\n    loading ? (\r\n        <>\r\n        <Helmet>\r\n            <title>Loading | T-flix</title>\r\n        </Helmet>\r\n        <Loader /> \r\n        </>\r\n    ) : (\r\n        <Container>\r\n            <Helmet>\r\n                <title> \r\n                    {result.original_title ? result.original_title : result.original_name}{\" \"} \r\n                    | T-flix</title>\r\n            </Helmet>\r\n            <Backdrop \r\n                bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} \r\n            />\r\n            <Content>\r\n                <Cover \r\n                    bgImage={\r\n                        result.poster_path \r\n                            ? `https://image.tmdb.org/t/p/original${result.poster_path}` \r\n                            : require(\"../../assets/noPosterSmall.png\")\r\n                    } \r\n                />\r\n                <Data>\r\n                    <Title>\r\n                        {result.original_title \r\n                            ? result.original_title \r\n                            : result.original_name}\r\n                    </Title>\r\n                    <ItemContainer>\r\n                        <Item>{result.release_date \r\n                            ? result.release_date.substring(0, 4) \r\n                            : result.first_air_date.substring(0, 4)}\r\n                        </Item>\r\n                        <Divider>·</Divider>\r\n                        <Item>{result.runtime\r\n                            ? result.runtime \r\n                            : result.episode_run_time} min\r\n                        </Item>\r\n                        <Divider>·</Divider>\r\n                        <Item>\r\n                            {result.genres && \r\n                                result.genres.map((genre, index) => \r\n                                    index === result.genres.length - 1\r\n                                        ? genre.name //마지막에 /를 붙여주지 않기 위해서 있는것이다.\r\n                                        : `${genre.name} / ` //마지막이 아닌것은 /를 붙이기 위해서 있는것이다.\r\n                                )}\r\n                        </Item>\r\n                    </ItemContainer>\r\n                        <Overview>{result.overview}</Overview>\r\n                </Data>\r\n            </Content>\r\n        </Container>\r\n    ); \r\n\r\n\r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi } from \"../../api\";\r\nimport { tvApi } from \"../../api\";\r\n\r\n\r\nexport default class extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        const {location: {pathname}} = props; //여기서 바로 옆에있는 props는 리엑트router로부터 받아온 정보를 의미한다. props안에 location객체가 있는데 location객체 안에 있는 값들을 pathname이라는 변수에 대입한다는 뜻이다.\r\n        this.state = {                        //(모르겠으면 render안에 있는 console.log(this.props); 실행해서 확인하기)\r\n            result: null,                     //(기본적으로 리엑트router는 route들에게 모든정보를 전달해준다.)\r\n            error: null,                      \r\n            loading: true,\r\n            isMovie: pathname.includes(\"/movie/\") //pathname객체에 /movie/가 있는지 확인하는 것이다. /movie/가 있으면 true, 없으면 false이다.\r\n        };\r\n    }\r\n    \r\n\r\n    async componentDidMount(){ //async, await는 자바스크립트한테, 서버로부터 데이터를 갖고오는 것을 끝날떄까지 \"거기~나 좀 기다려\"라고 말하는 것과 같다. \r\n        const {                //async라는 단어를 가진 함수 안에 있지 않으면 await를 사용할 수 없다.\r\n            match: {\r\n                params: { id }\r\n            },\r\n            history: {push}\r\n        } = this.props;\r\n        const { isMovie } = this.state;\r\n        const parsedId = parseInt(id); //parseInt함수는 문자열을 NAN으로 바꿔주는 함수이다. 숫자는 해당되지 않음\r\n        if(isNaN(parsedId)){ //옆에 if문은 if(parsedId === NAN)과 동일하다.\r\n            return push(\"/\");\r\n        }\r\n        let result = null;\r\n        try{ //성공할떄\r\n            if(isMovie){\r\n                ({data:result} = await moviesApi.movieDetail(parsedId)); \r\n                //data객체를 result에 대입을 하는 코드인데 {data:result} = await moviesApi.movieDetail(parsedId)에서 양쪽 끝을 소괄호()로 감싸져있다. 이렇게 하면 const = {data:result} = await moviesApi.movieDetail(parsedId) 하는 것과 같다. \r\n            } else {\r\n                ({data:result} = await tvApi.showDetail(parsedId));\r\n                //위에 주석참조\r\n            }\r\n        } catch{ //실패할떄\r\n            this.setState({ error:\"Can't find anything.\" })\r\n        } finally { //성공, 실패 여부와 관계없이 완료하고 마지막 동작을 취하고 싶을때\r\n            this.setState({loading: false, result});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props);\r\n       const { result, error, loading } = this.state;\r\n       //console.log(this.state);\r\n       //console.log(result);\r\n       return (\r\n        <DetailPresenter result={result} error={error} loading={loading} />\r\n       );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from 'Components/Header';\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home} />\r\n                <Route path=\"/tv\" component={TV} />\r\n                <Route path=\"/search\" component={Search} />\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/show/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n);\r\n\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import React, { Component } from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyles from 'Components/GlobalStyles';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}